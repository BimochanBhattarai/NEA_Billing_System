generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

// schema.prisma

datasource db {
  provider = "mysql" // or "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userID     Int       @id @default(autoincrement())
  username   String    @unique
  password   String
  name       String
  userType   UserType  @relation(fields: [userTypeID], references: [userTypeID])
  userTypeID Int
  status     Status    @default(Active)
  lastLogin  DateTime?
  createdAt  DateTime  @default(now())

  // Relations
  customer Customer?
  employee Employee?
}

model Customer {
  cusID          Int        @id @default(autoincrement())
  userID         Int        @unique
  user           User       @relation(fields: [userID], references: [userID])
  scNo           String     @unique
  fullName       String
  address        String
  mobileNo       String
  citizenshipNo  String     @unique
  dob            DateTime
  demandType     DemandType @relation(fields: [demandTypeID], references: [demandTypeID])
  demandTypeID   Int
  branch         Branch     @relation(fields: [branchID], references: [branchID])
  branchID       Int
  citizenshipDoc String?
  propertyDoc    String?
  status         Status     @default(Active)
  createdAt      DateTime   @default(now())

  // Relations
  bills    Bill[]
  payments Payment[]
}

model Bill {
  billNo          Int        @id @default(autoincrement())
  customer        Customer   @relation(fields: [cusID], references: [cusID])
  cusID           Int
  billDate        DateTime   @default(now())
  billMonth       Int
  billYear        Int
  previousReading Int
  currentReading  Int
  consumedUnits   Int
  minimumCharge   Float
  rate            Float
  totalAmount     Float
  status          BillStatus @default(Generated)
  verifiedBy      Employee?  @relation(fields: [verifiedByID], references: [empID])
  verifiedByID    Int?
  verifiedAt      DateTime?
  dueDate         DateTime

  // Relations
  payment Payment?
}

model Payment {
  paymentID       Int           @id @default(autoincrement())
  bill            Bill          @relation(fields: [billID], references: [billNo])
  billID          Int           @unique
  customer        Customer      @relation(fields: [cusID], references: [cusID])
  cusID           Int
  method          PaymentMethod @relation(fields: [paymentMethodID], references: [paymentMethodID])
  paymentMethodID Int
  amountPaid      Float
  rebate          Float         @default(0)
  penalty         Float         @default(0)
  paymentDate     DateTime      @default(now())
  transactionID   String?
  receiptNumber   String        @unique

  // Relations
  processedBy   Employee? @relation(fields: [processedByID], references: [empID])
  processedByID Int?
}

model Branch {
  branchID      Int       @id @default(autoincrement())
  name          String
  location      String
  contactNumber String
  incharge      Employee? @relation("BranchIncharge", fields: [inchargeID], references: [empID])
  inchargeID    Int?      @unique
  status        Status    @default(Active)

  // Relations
  employees Employee[] @relation("BranchEmployees")
  customers Customer[]
}

model PaymentMethod {
  paymentMethodID Int     @id @default(autoincrement())
  name            String
  logoURL         String?
  status          Status  @default(Active)

  // Relations
  payments Payment[]
}

model DemandType {
  demandTypeID  Int     @id @default(autoincrement())
  name          String
  description   String?
  rate          Float
  minimumCharge Float
  status        Status  @default(Active)

  // Relations
  customers Customer[]
}

model Employee {
  empID          Int          @id @default(autoincrement())
  employeeType   EmployeeType @relation(fields: [employeeTypeID], references: [employeeTypeID])
  employeeTypeID Int
  branch         Branch       @relation("BranchEmployees", fields: [branchID], references: [branchID])
  branchID       Int
  name           String
  contactNo      String
  user           User         @relation(fields: [userID], references: [userID])
  userID         Int          @unique
  status         Status       @default(Active)

  // Relations
  managedBranch     Branch?   @relation("BranchIncharge")
  verifiedBills     Bill[]
  processedPayments Payment[]
}

model EmployeeType {
  employeeTypeID Int    @id @default(autoincrement())
  name           String
  status         Status @default(Active)

  // Relations
  employees Employee[]
}

model UserType {
  userTypeID Int    @id @default(autoincrement())
  name       String
  status     Status @default(Active)

  // Relations
  users User[]
}

// Enums
enum Status {
  Active
  Inactive
  Suspended
}

enum BillStatus {
  Generated
  Verified
  Paid
  Overdue
  Cancelled
}
